// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "redditclone/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// AddPostComment mocks base method.
func (m *MockPostRepo) AddPostComment(post *models.Post, comment *models.Comment) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPostComment", post, comment)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPostComment indicates an expected call of AddPostComment.
func (mr *MockPostRepoMockRecorder) AddPostComment(post, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPostComment", reflect.TypeOf((*MockPostRepo)(nil).AddPostComment), post, comment)
}

// CreateNewPost mocks base method.
func (m *MockPostRepo) CreateNewPost(category, title, postType, url, text string, user *models.User) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPost", category, title, postType, url, text, user)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewPost indicates an expected call of CreateNewPost.
func (mr *MockPostRepoMockRecorder) CreateNewPost(category, title, postType, url, text, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPost", reflect.TypeOf((*MockPostRepo)(nil).CreateNewPost), category, title, postType, url, text, user)
}

// DeletePost mocks base method.
func (m *MockPostRepo) DeletePost(post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepoMockRecorder) DeletePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepo)(nil).DeletePost), post)
}

// DeletePostComment mocks base method.
func (m *MockPostRepo) DeletePostComment(post *models.Post, comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostComment", post, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostComment indicates an expected call of DeletePostComment.
func (mr *MockPostRepoMockRecorder) DeletePostComment(post, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostComment", reflect.TypeOf((*MockPostRepo)(nil).DeletePostComment), post, comment)
}

// GetAllPosts mocks base method.
func (m *MockPostRepo) GetAllPosts(category, username string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", category, username)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostRepoMockRecorder) GetAllPosts(category, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepo)(nil).GetAllPosts), category, username)
}

// GetPostByID mocks base method.
func (m *MockPostRepo) GetPostByID(id string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", id)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostRepoMockRecorder) GetPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostRepo)(nil).GetPostByID), id)
}

// UpvotePost mocks base method.
func (m *MockPostRepo) UpvotePost(user *models.User, post *models.Post, rate int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", user, post, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockPostRepoMockRecorder) UpvotePost(user, post, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockPostRepo)(nil).UpvotePost), user, post, rate)
}
